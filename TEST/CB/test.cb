// -- IMPORTS

require "ecr"
require "http/server";

// -- MODULES

module TEST
{
    // -- TYPES

    abstract struct ABSTRACT
    {
    }

    // ~~

    struct POSITION
    {
        // -- ATTRIBUTES

        protected property
            X : FLOAT64,
            Y : FLOAT64,
            Z : FLOAT64;
        class_property
            Zero = POSITION.New( 0.0, 0.0, 0.0 );

        // -- CONSTRUCTORS

        def Initialize(
            @X,
            @Y,
            @Z
            ) : VOID
        {
        }

        // -- INQUIRIES

        def IsZero(
            ) : BOOL
        {
            return
                X == $Zero.X
                && Y == $Zero.Y
                && Z == $Zero.Z;
        }
    }

    // ~~

    enum COLOR
    {
        // -- CONSTANTS

        #Red
        #Green
        #Blue

        // -- INQUIRIES

        def IsRed?(
            ) : BOOL
        {
            return self == #Red;
        }
    }

    // ~~

    struct POINT
    {
        // -- CONSTRUCTORS

        def Initialize(
            @Name : STRING,
            @Position : POSITION,
            @Color : COLOR
            ) : VOID
        {
        }

        // -- INQUIRIES

        def IsBlue(
            ) : BOOL
        {
            return @Color == COLOR::#Blue;
        }
    }

    // ~~

    struct PERSON
    {
        // -- ATTRIBUTES

        property
            Name : STRING,
            Age : INT32,
            Color : COLOR;
        class_property
            MinimumAge : INT32 = 25,
            MaximumAge : INT32 = 70;

        // -- CONSTRUCTORS

        def Initialize(
            @Name,
            @Age,
            @Color
            ) : VOID
        {
            if ( @Age < $MinimumAge )
            {
                Puts( "Studying" );
            }
            elsif ( @Age >= $MinimumAge
                    && @Age < $MaximumAge )
            {
                Puts( "Working" );
            }
            else
            {
                Puts( "Retreated" );
            }
        }

        // -- INQUIRIES

        def IsGreen?(
            ) : BOOL
        {
            return Color == COLOR::#Green;
        }

        // -- OPERATIONS

        protected def Print(
            ) : VOID
        {
            Puts( "#{age} - #{name}" );
        }
    }

    // ~~

    class TEST
    {
        // -- CONSTRUCTORS

        def Initialize(
            @Hello : STRING,
            @World : STRING
            ) : VOID
        {
        }

        // -- OPERATIONS

        def TestComment(
            count : INT32
            ) : INT32
        {
            //****************
            // This is
            //  a single-line
            //   comment.
            //****************
            /* This is a single-line comment. */
            /* This is
               a multi-line
               comment. */
            /*
               This is
               a multi-line
               comment.
            */
            /* This is
                a multi-line
                 comment. */
            /* This is
        a multi-line
    comment. */
            /* This
             is
              a multi-line
               comment. */
            /*   This is
                 a multi-line
                 comment. */

            if ( count <= 1 )    // This is a comment.
            {
                return 10;    // This is a comment.
            }
            else
            {
                return 20;    // This is a comment.
            }
        }

        // ~~

        def TestIf(
            count : INT32
            ) : INT32
        {
            if ( count <= 1 )
            {
                return 10;
            }

            if ( count <= 1 )
            {
                return 10;
            }
            else
            {
                return 20;
            }

            if ( count <= 1 )
            {
                return 10;
            }
            elsif ( count <= 2 )
            {
                return 20;
            }
            else
            {
                return 30;
            }

            if ( count >= 1
                 && count * 2
                    < count * 3 - 5 )
            {
                count
                    += TestUnless(
                           count * 3 - 5
                           - count * 2
                           );
            }
        }

        // ~~

        def TestUnless(
            count : INT32
            ) : INT32
        {
            unless ( count > 1 )
            {
                return 10;
            }

            unless ( count > 1 )
            {
                return 10;
            }
            else
            {
                return 20;
            }
        }

        // ~~

        def TestWhile(
            count : INT32
            ) : INT32
        {
            index = 0;

            while ( index < count )
            {
                index = index + 1;
            }

            return index;
        }

        // ~~

        def TestUntil(
            count : INT32
            ) : INT32
        {
            index = 0;

            until ( index >= count )
            {
                index = index + 1;
            }

            return index;
        }

        // ~~

        def TestCase(
            count : INT32
            ) : INT32
        {
            case ( count )
            {
                when 1
                {
                    return 10;
                }
            }

            case ( count )
            {
                when 1
                {
                    return 10;
                }
                when 2
                {
                    return 20;
                }
            }

            case ( count )
            {
                when 1
                {
                    return 10;
                }
                when 2
                {
                    return 20;
                }
                else
                {
                    return 30;
                }
            }
        }

        // ~~

        def TestBegin(
            ) : INT32
        {
            begin
            {
                result = 10;
            }
            rescue
            {
                result = 20;
            }
            else
            {
                result = 30;
            }
            ensure
            {
                result = 40;
            }
        }

        // ~~

        def TestRescue(
            ) : INT32
        {
            result = 10;
        }
        rescue
        {
            result = 20;
        }
        else
        {
            result = 30;
        }
        ensure
        {
            result = 40;
        }

        // ~~

        def TestEach(
            ) : BOOL
        {
            "0123456789".EachChar
                do | character |
                {
                    Print( character );
                }

            Print( '\n' );

            [
                { 1, "A" },
                { 2, "B" }
            ].Each
                do | key, value |
                {
                    Puts( "#{key} : #{value}" );
                }

            return true;
        }

        // ~~

        def TestType(
            ) : BOOL
        {
            data = ARRAY( NAMED_TUPLE( Id: INT32, Name: STRING ) ).New();
            data.Push( { Id: 1, Name: "Toto" } );
            data.Push( { Id: 2, Name: "Tutu" } );
            data.Push( { Id: 3, Name: "Tata" } );
            data.Push( { Id: 4, Name: "Titi" } );

            Puts( data );

            return true;
        }

        // ~~

        def TestCharacter(
            ) : BOOL
        {
            Puts( '\'' );
            Puts( '\\' );
            Puts( '\u0041' );
            Puts( '\u{41}' );
            Puts( 'a' );
            Puts( '„ÅÇ' );

            return true;
        }

        // ~~

        def TestString(
            ) : BOOL
        {
            Puts( "Test #{@Hello + " Test #{@Hello} #{@World} Test " + @World} Test" );
            Puts( %(Test #{@Hello + %( Test #{@Hello} #{@World} Test ) + @World} Test) );
            Puts( %[Test #{@Hello + %[ Test #{@Hello} #{@World} Test ] + @World} Test] );
            Puts( %{Test #{@Hello + %{ Test #{@Hello} #{@World} Test } + @World} Test} );
            Puts( %<Test #{@Hello + %< Test #{@Hello} #{@World} Test > + @World} Test> );
            Puts( %|Test #{@Hello + %| Test #{@Hello} #{@World} Test | + @World} Test| );
            Puts( %(Test #{@Hello + %[ Test #{@Hello} #{@World} Test ] + @World} Test) );
            Puts( %Q(Test #{@Hello + %Q( Test #{@Hello} #{@World} Test ) + @World} Test) );
            Puts( %Q[Test #{@Hello + %Q[ Test #{@Hello} #{@World} Test ] + @World} Test] );
            Puts( %Q{Test #{@Hello + %Q{ Test #{@Hello} #{@World} Test } + @World} Test} );
            Puts( %Q<Test #{@Hello + %Q< Test #{@Hello} #{@World} Test > + @World} Test> );
            Puts( %Q|Test #{@Hello + %Q| Test #{@Hello} #{@World} Test | + @World} Test| );
            Puts( %Q(Test #{@Hello + %Q[ Test #{@Hello} #{@World} Test ] + @World} Test) );

            Puts( "Test \#{@Hello + \" Test \#{@Hello} \#{@World} Test \" + @World} Test" );
            Puts( %q(Test #{@Hello + %q( Test #{@Hello} #{@World} Test ) + @World} Test) );
            Puts( %q[Test #{@Hello + %q[ Test #{@Hello} #{@World} Test ] + @World} Test] );
            Puts( %q{Test #{@Hello + %q{ Test #{@Hello} #{@World} Test } + @World} Test} );
            Puts( %q<Test #{@Hello + %q< Test #{@Hello} #{@World} Test > + @World} Test> );
            Puts( %q(Test #{@Hello + %q[ Test #{@Hello} #{@World} Test ] + @World} Test) );

            [ "", " ", "x", "x x", "  Hello  World !  " ].Each
                do | old_text |
                {
                    part_array = old_text.Split( ' ' );
                    new_text = part_array.Join( ' ' );
                    Puts( "'#{old_text}' => #{part_array} => '#{new_text}'" );
                }

            return true;
        }

        // ~~

        def TestLetterCase(
            ) : BOOL
        {
            # \snake_case \PascalCase \UPPER_CASE
            # SnakeCase PASCAL_CASE \UPPER_CASE
            # snake_case #pascal_case #UpperCase
            # \// \\ \$SnakeCase \#SnakeCase \UINT32 UINT32

            return true;
        }

        // ~~

        def TestServer(
            server_is_run
            ) : BOOL
        {
            if ( server_is_run )
            {
                server = HTTP::SERVER.New
                    do | context |
                    {
                        context.Response.ContentType = "text/plain";
                        context.Response.Print( "Hello world! The time is #{TIME.Now}" );
                    }

                address = server.BindTcp( 8080 );
                Puts( "Listening on http://#{address}" );
                server.Listen();
            }

            return true;
        }

        // ~~

        def Run(
            ) : VOID
        {
            Puts( TestComment( 1 ) );
            Puts( TestIf( 1 ) );
            Puts( TestUnless( 1 ) );
            Puts( TestWhile( 10 ) );
            Puts( TestUntil( 10 ) );
            Puts( TestCase( 1 ) );
            Puts( TestBegin() );
            Puts( TestRescue() );
            Puts( TestEach() );
            Puts( TestType() );
            Puts( TestCharacter() );
            Puts( TestString() );
            Puts( TestLetterCase() );
            Puts( TestServer( false ) );
        }
    }

    // -- STATEMENTS

    test = TEST.New( "Hello", "World" );
    test.Run();

    // ~~

    point
        = POINT.New(
              "point",
              POSITION.New( 1.0, 2.0, 3.0 ),
              COLOR::#Blue
              );

    Puts(
        point.@Position.X,
        point.@Position.Y,
        point.@Position.Z,
        PERSON.MinimumAge,
        PERSON.MaximumAge
        );

    // ~~

    person_array = ARRAY( PERSON ).New();
    person_array.Push( PERSON.New( "Red", 15, COLOR::#Red ) );
    person_array.Push( PERSON.New( "Green", 35, COLOR::#Green ) );
    person_array.Push( PERSON.New( "Blue", 75, COLOR::#Blue ) );

    // ~~

    server = HTTP::SERVER.New
        do | context |
        {
            request = context.Request;

            response = context.Response;
            response.Headers[ "Server" ] = "Crystal";
            response.Headers[ "Date" ] = HTTP.FormatTime( TIME.Now );
            response.Headers[ "Content-Type" ] = "text/html; charset=UTF-8";
            response.StatusCode = 200;

            case ( request.Path )
            {
                when "/"
                {
                    ECR.Embed "test.ecr", response
                }
                when "/get"
                {
                    response.Print( "<p>#{request.Path}</p>" );
                    request.QueryParams.Each
                        do | name, value |
                        {
                            response.Print( "<p>#{name} : #{value}</p>" );
                        }
                }
                when "/post"
                {
                    response.Print( "<p>#{request.Path}</p>" );
                    request_body = request.Body;

                    if ( request_body )
                    {
                        HTTP::PARAMS.Parse( request_body.GetsToEnd ).Each
                            do | name, value |
                            {
                                response.Print( "<p>#{name} : #{value}</p>" );
                            }
                    }
                }
                when "/time"
                {
                    response.Print( "<p>The time is #{TIME.Now}</p>" );
                }
                else
                {
                    response.Print( "<h1>Oops...</h1><p>#{request.Path}</p>" );
                    response.StatusCode = 404;
                }
            }

            response.Print( "<p><a href=\"/\">Back</a></p>" );
        }

    Puts( "Listening on http://127.0.0.1:8080" );

    server.Listen( "127.0.0.1", 8080, reuse_port: true )
}
