// -- MODULES

module CIBYL
{
    // -- TYPES

    enum COLOR
    {
        // -- CONSTANTS

        Red
        Green
        Blue

        // -- INQUIRIES

        def IsRed?(
            )
        {
            return self == Red;
        }
    }

    // ~~

    abstract struct ABSTRACT
    {
    }

    // ~~

    struct POINT
    {
        // -- ATTRIBUTES

        property name, age;

        // -- CONSTRUCTORS

        def Initialize(
            @Name : String,
            @Age : Int32
            )
        {
        }

        // -- OPERATIONS

        protected def Print(
            )
        {
            Puts( "#{age} - #{name}" );
        }
    }

    // ~~

    class TEST
    {
        // -- OPERATIONS

        def TestIf(
            count : Int
            ) : Int
        {
            if ( count <= 1 )
            {
                return 10;
            }

            if ( count <= 1 )
            {
                return 10;
            }
            else
            {
                return 20;
            }

            if ( count <= 1 )
            {
                return 10;
            }
            elsif ( count <= 2 )
            {
                return 20;
            }
            else
            {
                return 30;
            }
        }

        // ~~

        def TestUnless(
            count : Int
            ) : Int
        {
            unless ( count > 1 )
            {
                return 10;
            }

            unless ( count > 1 )
            {
                return 10;
            }
            else
            {
                return 20;
            }
        }

        // ~~

        def TestWhile(
            count : Int
            )
        {
            index = 0;

            while ( index < count )
            {
                index = index + 1;
            }
        }

        // ~~

        def TestUntil(
            count : Int
            )
        {
            index = 0;

            until ( index >= count )
            {
                index = index + 1;
            }
        }

        // ~~

        def TestCase(
            count : Int
            )
        {
            case ( count )
            {
                when 1
                {
                    return 10;
                }
            }

            case ( count )
            {
                when 1
                {
                    return 10;
                }
                when 2
                {
                    return 20;
                }
            }

            case ( count )
            {
                when 1
                {
                    return 10;
                }
                when 2
                {
                    return 20;
                }
                else
                {
                    return 30;
                }
            }
        }

        // ~~

        def TestBegin(
            )
        {
            begin
            {
                result = 1;
            }
            rescue
            {
                result = 2;
            }
            else
            {
                result = 3;
            }
            ensure
            {
                result = 4;
            }
        }

        // ~~

        def TestRescue(
            )
        {
            result = 1;
        }
        rescue
        {
            result = 2;
        }
        else
        {
            result = 3;
        }
        ensure
        {
            result = 4;
        }

        // ~~

        def TestEach(
            )
        {
            "0123456789".each_char
                do |character|
                {
                    Print( character );
                }

            Print( '\n' );

            [
                {1, "A"},
                {2, "B"}
            ].each
                do |key, value|
                {
                    Puts( "#{@key} : #{@value}" );
                }
        }
    }
}

// -- STATEMENTS

require "http/server";

server = HTTP::Server.new
    do |context|
    {
        context.response.content_type = "text/plain";
        context.response.Print( "Hello world! The time is #{Time.now}" );
    }

address = server.BindTcp( 8080 );
Puts( "Listening on http://#{address}" );
server.Listen();
