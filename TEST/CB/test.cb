// -- MODULES

module CIBYL
{
    // -- TYPES

    abstract struct ABSTRACT
    {
    }

    // ~~

    struct POSITION
    {
        // -- CONSTRUCTORS

        method Initialize(
            @X : INT32,
            @Y : INT32,
            @Z : INT32
            )
        {
        }
    }

    // ~~

    enum COLOR
    {
        // -- CONSTANTS

        #Red
        #Green
        #Blue

        // -- INQUIRIES

        method IsRed?(
            )
        {
            return self == #Red;
        }
    }

    // ~~

    struct POINT
    {
        // -- CONSTRUCTORS

        method Initialize(
            @Name : STRING,
            @Position : POSITION,
            @Color : COLOR
            )
        {
        }

        // -- INQUIRIES

        method HasColor(
            color : COLOR
            )
        {
            return @Color == color;
        }
    }

    // ~~

    struct PERSON
    {
        // -- ATTRIBUTES

        property Name, Age, Color;

        // -- CONSTRUCTORS

        method Initialize(
            @Name : STRING,
            @Age : INT32,
            @Color : COLOR
            )
        {
        }

        // -- INQUIRIES

        method IsGreen?(
            )
        {
            return Color == COLOR.#Green;
        }

        // -- OPERATIONS

        protected method Print(
            )
        {
            Puts( "#{age} - #{name}" );
        }
    }

    // ~~

    class TEST
    {
        // -- OPERATIONS

        method TestIf(
            count : INT
            ) : INT
        {
            if ( count <= 1 )
            {
                return 10;
            }

            if ( count <= 1 )
            {
                return 10;
            }
            else
            {
                return 20;
            }

            if ( count <= 1 )
            {
                return 10;
            }
            elsif ( count <= 2 )
            {
                return 20;
            }
            else
            {
                return 30;
            }
        }

        // ~~

        method TestUnless(
            count : INT
            ) : INT
        {
            unless ( count > 1 )
            {
                return 10;
            }

            unless ( count > 1 )
            {
                return 10;
            }
            else
            {
                return 20;
            }
        }

        // ~~

        method TestWhile(
            count : INT
            )
        {
            index = 0;

            while ( index < count )
            {
                index = index + 1;
            }
        }

        // ~~

        method TestUntil(
            count : INT
            )
        {
            index = 0;

            until ( index >= count )
            {
                index = index + 1;
            }
        }

        // ~~

        method TestCase(
            count : INT
            )
        {
            case ( count )
            {
                when 1
                {
                    return 10;
                }
            }

            case ( count )
            {
                when 1
                {
                    return 10;
                }
                when 2
                {
                    return 20;
                }
            }

            case ( count )
            {
                when 1
                {
                    return 10;
                }
                when 2
                {
                    return 20;
                }
                else
                {
                    return 30;
                }
            }
        }

        // ~~

        method TestBegin(
            )
        {
            begin
            {
                result = 1;
            }
            rescue
            {
                result = 2;
            }
            else
            {
                result = 3;
            }
            ensure
            {
                result = 4;
            }
        }

        // ~~

        method TestRescue(
            )
        {
            result = 1;
        }
        rescue
        {
            result = 2;
        }
        else
        {
            result = 3;
        }
        ensure
        {
            result = 4;
        }

        // ~~

        method TestEach(
            )
        {
            "0123456789".EachChar
                do |character|
                {
                    Print( character );
                }

            Print( '\n' );

            [
                {1, "A"},
                {2, "B"}
            ].Each
                do |key, value|
                {
                    Puts( "#{@key} : #{@value}" );
                }
        }

        // ~~

        method TestCase(
            )
        {
            data = ARRAY( NAMED_TUPLE( Id: INT32, Message: STRING ) ).New
        }
    }
}

// -- STATEMENTS

require "http/server";

server = HTTP::SERVER.New
    do |context|
    {
        context.Response.ContentType = "text/plain";
        context.Response.Print( "Hello world! The time is #{Time.now}" );
    }

address = server.BindTcp( 8080 );
Puts( "Listening on http://#{address}" );
server.Listen();
